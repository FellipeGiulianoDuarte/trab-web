name: Reset Database Schema

on:
  workflow_dispatch:  # Permite executar manualmente
    inputs:
      confirm_reset:
        description: 'Digite "CONFIRMAR" para resetar o banco (APAGA TODOS OS DADOS!)'
        required: true
        default: ''

permissions:
  contents: read

jobs:
  reset_database:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_reset == 'CONFIRMAR'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Reset database with new schema
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "⚠️  INICIANDO RESET DO BANCO DE DADOS..."
            echo "🗃️ Fazendo backup do banco atual..."
            
            # Fazer backup (se o banco existir)
            mysqldump -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER_PROD }} -p${{ secrets.DB_PASSWORD_PROD }} ${{ secrets.DB_NAME_PROD }} > /tmp/backup_$(date +%Y%m%d_%H%M%S).sql || echo "⚠️  Backup falhou ou banco não existe"
            
            echo "🗃️ Resetando banco de dados..."
            mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER_PROD }} -p${{ secrets.DB_PASSWORD_PROD }} -e "DROP DATABASE IF EXISTS ${{ secrets.DB_NAME_PROD }};"
            
            echo "📋 Aplicando novo schema..."
            cat << 'EOF' | mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER_PROD }} -p${{ secrets.DB_PASSWORD_PROD }}
            CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME_PROD }}
              DEFAULT CHARACTER SET = utf8mb4
              DEFAULT COLLATE = utf8mb4_general_ci;

            USE ${{ secrets.DB_NAME_PROD }};

            CREATE TABLE IF NOT EXISTS \`users\` (
              \`id\` INT AUTO_INCREMENT PRIMARY KEY,
              \`username\` VARCHAR(255) NOT NULL UNIQUE,
              \`password_hash\` VARCHAR(255) NOT NULL,
              \`email\` VARCHAR(255) NOT NULL UNIQUE,
              \`created_at\` TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE IF NOT EXISTS \`games\` (
              \`id\` INT AUTO_INCREMENT PRIMARY KEY,
              \`user_id\` INT NOT NULL,
              \`score\` INT NOT NULL,
              \`played_at\` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (\`user_id\`) REFERENCES \`users\`(\`id\`) ON DELETE CASCADE
            );

            CREATE TABLE IF NOT EXISTS \`leagues\` (
              \`id\` INT AUTO_INCREMENT PRIMARY KEY,
              \`name\` VARCHAR(255) NOT NULL UNIQUE,
              \`creator_user_id\` INT NOT NULL,
              \`keyword\` VARCHAR(50) NOT NULL,
              \`created_at\` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (\`creator_user_id\`) REFERENCES \`users\`(\`id\`) ON DELETE CASCADE
            );

            CREATE TABLE IF NOT EXISTS \`league_members\` (
              \`id\` INT AUTO_INCREMENT PRIMARY KEY,
              \`league_id\` INT NOT NULL,
              \`user_id\` INT NOT NULL,
              \`joined_at\` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (\`league_id\`) REFERENCES \`leagues\`(\`id\`) ON DELETE CASCADE,
              FOREIGN KEY (\`user_id\`) REFERENCES \`users\`(\`id\`) ON DELETE CASCADE,
              UNIQUE KEY \`unique_league_user\` (\`league_id\`, \`user_id\`)
            );
            EOF
            
            echo "✅ Schema aplicado com sucesso!"
            echo "📊 Verificando tabelas criadas..."
            mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER_PROD }} -p${{ secrets.DB_PASSWORD_PROD }} ${{ secrets.DB_NAME_PROD }} -e "SHOW TABLES;"
            
            echo "🎉 Reset do banco concluído!"
